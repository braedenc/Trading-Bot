agents:
  smoke-test:
    description: "Run unit tests + SMA agent sanity check to ensure system integrity"
    steps:
      - shell: |
          # Test simple version first (no dependencies)
          echo "üß™ Running simple SMA tests..."
          python3 trading_bot/test_sma_simple.py
      - shell: |
          # Run full test suite if pandas/numpy available
          echo "üî¨ Running full SMA agent tests..."
          python3 trading_bot/test_sma_agent.py 2>/dev/null || echo "‚ö†Ô∏è  Full tests skipped (missing pandas/numpy)"
      - shell: |
          # Quick dry-run performance test
          echo "‚ö° Running performance validation..."
          python3 trading_bot/debug_sma_performance.py

  paper-trade-sim:
    description: "Simulate paper trading session with SMA agent"
    steps:
      - shell: |
          echo "üìä Starting SMA Agent paper trading simulation..."
          python3 - <<'PY'
          import asyncio
          import sys
          import os
          sys.path.append('.')
          
          from trading_bot.agents.sma_agent import SMAAgent
          from trading_bot.test_sma_simple import generate_mock_price_data
          from datetime import datetime
          
          async def run_paper_simulation():
              print("ü§ñ Initializing SMA Agent...")
              agent = SMAAgent(fast_period=10, slow_period=20)
              
              print("üìà Generating market data...")
              mock_data = generate_mock_price_data("AAPL", 100)
              
              snapshot = {
                  'prices': {'AAPL': mock_data},
                  'positions': {'AAPL': 0},
                  'timestamp': datetime.now()
              }
              
              print("üîç Generating signals...")
              signals = await agent.generate_signals(snapshot)
              
              print(f"üì¢ Generated {len(signals)} signals:")
              for signal in signals:
                  print(f"   {signal['action'].upper()}: {signal['quantity']:.2f} {signal['symbol']}")
                  print(f"   Reason: {signal['reasoning']}")
                  print(f"   Confidence: {signal['confidence']:.1%}")
              
              if not signals:
                  print("   No signals generated (insufficient crossover conditions)")
              
              print("‚úÖ Paper trading simulation complete")
          
          asyncio.run(run_paper_simulation())
          PY

  performance-benchmark:
    description: "Run comprehensive performance benchmarks on SMA calculations"
    steps:
      - shell: |
          echo "üèÉ‚Äç‚ôÇÔ∏è Running SMA performance benchmarks..."
          python3 - <<'PY'
          import time
          import sys
          import os
          sys.path.append('.')
          
          from trading_bot.test_sma_simple import generate_mock_price_data, simple_sma
          
          def benchmark_sma_performance():
              print("=" * 60)
              print("üìä SMA PERFORMANCE BENCHMARK")
              print("=" * 60)
              
              test_sizes = [1000, 5000, 10000, 25000]
              
              for size in test_sizes:
                  print(f"\nüîß Testing with {size:,} data points:")
                  
                  # Generate data
                  start = time.time()
                  data = generate_mock_price_data("TEST", size)
                  data_time = time.time() - start
                  
                  prices = [p['close'] for p in data['historical']]
                  
                  # Calculate SMAs
                  start = time.time()
                  sma_calculations = 0
                  
                  for i in range(20, len(prices)):
                      sma_10 = simple_sma(prices[:i+1], 10)
                      sma_20 = simple_sma(prices[:i+1], 20)
                      sma_calculations += 2
                  
                  calc_time = time.time() - start
                  
                  print(f"   Data generation: {data_time:.3f}s")
                  print(f"   SMA calculations: {calc_time:.3f}s ({sma_calculations:,} ops)")
                  print(f"   Avg per calculation: {calc_time/sma_calculations*1000:.3f}ms")
                  print(f"   Throughput: {sma_calculations/calc_time:,.0f} calc/sec")
              
              print(f"\n‚úÖ Benchmark complete!")
          
          benchmark_sma_performance()
          PY

  agent-health-check:
    description: "Verify all trading agents load correctly and report their status"
    steps:
      - shell: |
          echo "üè• Running agent health check..."
          python3 - <<'PY'
          import sys
          import os
          sys.path.append('.')
          
          def check_agent_health():
              print("üîç Checking agent imports...")
              
              try:
                  from trading_bot.base_agent import BaseAgent
                  print("‚úÖ BaseAgent imported successfully")
              except Exception as e:
                  print(f"‚ùå BaseAgent import failed: {e}")
                  return False
              
              try:
                  from trading_bot.agents.sma_agent import SMAAgent
                  print("‚úÖ SMAAgent imported successfully")
                  
                  # Test instantiation
                  agent = SMAAgent()
                  print(f"‚úÖ SMAAgent created: {agent.name}")
                  print(f"   Fast period: {agent.fast_period}")
                  print(f"   Slow period: {agent.slow_period}")
                  
              except Exception as e:
                  print(f"‚ùå SMAAgent import/creation failed: {e}")
                  return False
              
              try:
                  from trading_bot.agents.github_agent import GitHubAgent
                  print("‚úÖ GitHubAgent imported successfully")
              except Exception as e:
                  print(f"‚ö†Ô∏è  GitHubAgent import failed: {e}")
              
              try:
                  from trading_bot.agents.optimized_technicals import OptimizedTechnicalAgent
                  print("‚úÖ OptimizedTechnicalAgent imported successfully")
              except Exception as e:
                  print(f"‚ö†Ô∏è  OptimizedTechnicalAgent import failed: {e}")
              
              print("\nüìä Agent health check complete!")
              return True
          
          check_agent_health()
          PY

  quick-backtest:
    description: "Run a quick backtest on historical data to validate strategy"
    steps:
      - shell: |
          echo "‚è™ Running quick SMA strategy backtest..."
          python3 - <<'PY'
          import asyncio
          import sys
          import os
          sys.path.append('.')
          
          from trading_bot.agents.sma_agent import SMAAgent
          from trading_bot.test_sma_simple import generate_mock_price_data
          from datetime import datetime, timedelta
          
          async def run_backtest():
              print("üìà SMA STRATEGY BACKTEST")
              print("=" * 40)
              
              # Generate longer historical data
              agent = SMAAgent(fast_period=5, slow_period=15)
              data = generate_mock_price_data("TEST", 250)  # ~1 year of data
              
              positions = {'TEST': 0}
              portfolio_value = 10000  # Start with $10k
              trades = []
              
              print(f"üè¶ Starting portfolio value: ${portfolio_value:,.2f}")
              print(f"üìä Processing {len(data['historical'])} data points...")
              
              # Simulate trading over time
              for i in range(50, len(data['historical'])):
                  # Create snapshot with data up to point i
                  historical_slice = data['historical'][:i+1]
                  snapshot = {
                      'prices': {'TEST': {'historical': historical_slice, 'current_price': historical_slice[-1]['close']}},
                      'positions': positions.copy(),
                      'timestamp': historical_slice[-1]['timestamp']
                  }
                  
                  signals = await agent.generate_signals(snapshot)
                  
                  for signal in signals:
                      if signal['action'] == 'buy' and positions['TEST'] <= 0:
                          price = historical_slice[-1]['close']
                          shares = portfolio_value * 0.95 / price  # Use 95% of portfolio
                          positions['TEST'] = shares
                          portfolio_value = portfolio_value * 0.05  # Keep 5% cash
                          trades.append(('BUY', shares, price, historical_slice[-1]['timestamp']))
                          
                      elif signal['action'] == 'sell' and positions['TEST'] > 0:
                          price = historical_slice[-1]['close']
                          portfolio_value += positions['TEST'] * price
                          trades.append(('SELL', positions['TEST'], price, historical_slice[-1]['timestamp']))
                          positions['TEST'] = 0
              
              # Final portfolio value
              final_price = data['historical'][-1]['close']
              if positions['TEST'] > 0:
                  portfolio_value += positions['TEST'] * final_price
              
              print(f"\nüìä BACKTEST RESULTS:")
              print(f"   Total trades: {len(trades)}")
              print(f"   Final portfolio value: ${portfolio_value:,.2f}")
              print(f"   Total return: {((portfolio_value/10000-1)*100):+.1f}%")
              
              if trades:
                  print(f"\nüìã Recent trades:")
                  for trade in trades[-3:]:
                      action, shares, price, timestamp = trade
                      print(f"   {action}: {shares:.2f} shares @ ${price:.2f}")
              
              print("‚úÖ Backtest complete!")
          
          asyncio.run(run_backtest())
          PY

  dev-setup:
    description: "Setup development environment and verify dependencies"
    steps:
      - shell: |
          echo "üîß Setting up development environment..."
          # Check Python version
          echo "üêç Python version:"
          python3 --version
          
          echo -e "\nüì¶ Checking core dependencies..."
          python3 - <<'PY'
          import sys
          
          required = ['numpy', 'pandas', 'asyncio', 'datetime', 'logging']
          optional = ['matplotlib', 'plotly', 'jupyter']
          
          print("Core dependencies:")
          for module in required:
              try:
                  __import__(module)
                  print(f"  ‚úÖ {module}")
              except ImportError:
                  print(f"  ‚ùå {module} - MISSING")
          
          print("\nOptional dependencies:")
          for module in optional:
              try:
                  __import__(module)
                  print(f"  ‚úÖ {module}")
              except ImportError:
                  print(f"  ‚ö†Ô∏è  {module} - not installed")
          PY
          
          echo -e "\nüìÅ Project structure verification:"
          ls -la trading_bot/
          echo -e "\nüìã Available agents:"
          ls -la trading_bot/agents/

  clean-repo:
    description: "Clean up temporary files and reset workspace"
    steps:
      - shell: |
          echo "üßπ Cleaning up workspace..."
          
          # Remove Python cache files
          echo "üóëÔ∏è  Removing Python cache files..."
          find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
          find . -name "*.pyc" -delete 2>/dev/null || true
          find . -name "*.pyo" -delete 2>/dev/null || true
          
          # Remove test output files
          echo "üóëÔ∏è  Removing temporary test files..."
          rm -f *.log 2>/dev/null || true
          rm -f trading_bot/*.log 2>/dev/null || true
          
          # Show what's left
          echo "üìä Workspace status:"
          git status --porcelain 2>/dev/null || echo "Not a git repository"
          
          echo "‚úÖ Cleanup complete!"

  strategy-analyze:
    description: "Analyze and compare different SMA strategy parameters"
    steps:
      - shell: |
          echo "üìä SMA Strategy Parameter Analysis"
          python3 - <<'PY'
          import asyncio
          import sys
          import os
          sys.path.append('.')
          
          from trading_bot.agents.sma_agent import SMAAgent
          from trading_bot.test_sma_simple import generate_mock_price_data
          
          async def analyze_strategies():
              print("üîç STRATEGY PARAMETER ANALYSIS")
              print("=" * 50)
              
              # Different parameter combinations to test
              strategies = [
                  (5, 10, "Very Fast"),
                  (10, 20, "Fast"),
                  (20, 50, "Medium"),
                  (50, 100, "Slow")
              ]
              
              # Generate consistent test data
              data = generate_mock_price_data("ANALYSIS", 200)
              
              print(f"üìà Testing {len(strategies)} strategy combinations on {len(data['historical'])} data points\n")
              
              for fast, slow, name in strategies:
                  print(f"üéØ {name} Strategy (SMA {fast}/{slow}):")
                  
                  agent = SMAAgent(fast_period=fast, slow_period=slow)
                  
                  signal_count = 0
                  buy_signals = 0
                  sell_signals = 0
                  
                  # Test signals over time windows
                  for i in range(max(fast, slow) + 10, len(data['historical']), 5):
                      snapshot = {
                          'prices': {'ANALYSIS': {
                              'historical': data['historical'][:i+1],
                              'current_price': data['historical'][i]['close']
                          }},
                          'positions': {'ANALYSIS': 0},
                          'timestamp': data['historical'][i]['timestamp']
                      }
                      
                      signals = await agent.generate_signals(snapshot)
                      signal_count += len(signals)
                      
                      for signal in signals:
                          if signal['action'] == 'buy':
                              buy_signals += 1
                          elif signal['action'] == 'sell':
                              sell_signals += 1
                  
                  print(f"   Total signals: {signal_count}")
                  print(f"   Buy signals: {buy_signals}")
                  print(f"   Sell signals: {sell_signals}")
                  print(f"   Signal frequency: {signal_count/((len(data['historical'])-max(fast,slow)-10)/5)*100:.1f}%")
                  print()
              
              print("‚úÖ Strategy analysis complete!")
          
          asyncio.run(analyze_strategies())
          PY

  docs-update:
    description: "Update documentation and generate performance reports"
    steps:
      - shell: |
          echo "üìö Updating project documentation..."
          
          # Generate current timestamp
          timestamp=$(date '+%Y-%m-%d %H:%M:%S')
          
          # Create/update performance summary
          cat > AGENT_PERFORMANCE_REPORT.md << 'EOF'
          # Trading Bot Agent Performance Report
          
          Generated: $timestamp
          
          ## Agent Status
          
          ### SMA Agent
          - Status: ‚úÖ Active
          - Strategy: Simple Moving Average Crossover
          - Performance: Optimized for high-frequency calculations
          - Test Coverage: Full unit tests available
          
          ### Available Test Commands
          ```bash
          # Quick smoke test
          python3 trading_bot/test_sma_simple.py
          
          # Full test suite  
          python3 trading_bot/test_sma_agent.py
          
          # Performance debugging
          python3 trading_bot/debug_sma_performance.py
          ```
          
          ## Cursor Agents Available
          
          | Agent | Purpose | Use Case |
          |-------|---------|----------|
          | `smoke-test` | Quick validation | Before every commit |
          | `paper-trade-sim` | Strategy simulation | Development testing |
          | `performance-benchmark` | Speed testing | Performance tuning |
          | `agent-health-check` | System validation | Debug import issues |
          | `quick-backtest` | Strategy validation | Historical testing |
          | `strategy-analyze` | Parameter tuning | Strategy optimization |
          
          ## Next Steps
          - Add live market data integration
          - Implement risk management layer
          - Add more technical indicators
          - Create dashboard UI
          
          EOF
          
          echo "üìÑ Generated AGENT_PERFORMANCE_REPORT.md"
          echo "‚úÖ Documentation update complete!"